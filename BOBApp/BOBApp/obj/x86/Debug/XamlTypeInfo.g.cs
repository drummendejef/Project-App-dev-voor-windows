//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace BOBApp
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace BOBApp.BOBApp_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[39];
            _typeNameTable[0] = "BOBApp.BaseViewModelLocator";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "BOBApp.ViewModels.MainViewVM";
            _typeNameTable[3] = "GalaSoft.MvvmLight.ViewModelBase";
            _typeNameTable[4] = "GalaSoft.MvvmLight.ObservableObject";
            _typeNameTable[5] = "BOBApp.ViewModels.BestemmingenVM";
            _typeNameTable[6] = "BOBApp.ViewModels.FeestjesOverzichtVM";
            _typeNameTable[7] = "BOBApp.ViewModels.LoginVM";
            _typeNameTable[8] = "BOBApp.ViewModels.ProfielVM";
            _typeNameTable[9] = "BOBApp.ViewModels.PuntenVM";
            _typeNameTable[10] = "BOBApp.ViewModels.RegisterVM";
            _typeNameTable[11] = "BOBApp.ViewModels.VindRitVM";
            _typeNameTable[12] = "BOBApp.ViewModels.VindRitFilterVM";
            _typeNameTable[13] = "BOBApp.ViewModels.VindRitChatVM";
            _typeNameTable[14] = "BOBApp.ViewModels.ZoekVriendenVM";
            _typeNameTable[15] = "BOBApp.ViewModels.MijnRittenVM";
            _typeNameTable[16] = "BOBApp.MainPage";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[19] = "Windows.UI.Color";
            _typeNameTable[20] = "System.ValueType";
            _typeNameTable[21] = "Byte";
            _typeNameTable[22] = "BOBApp.Views.Bestemmingen";
            _typeNameTable[23] = "BOBApp.Views.Bestemmingen_Nieuw";
            _typeNameTable[24] = "System.Collections.Generic.IList`1<Windows.UI.Xaml.DependencyObject>";
            _typeNameTable[25] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[26] = "BOBApp.Views.FeestjesOverzicht";
            _typeNameTable[27] = "BOBApp.Views.Login";
            _typeNameTable[28] = "BOBApp.Views.MainView";
            _typeNameTable[29] = "BOBApp.Views.MijnRitten";
            _typeNameTable[30] = "BOBApp.Views.Profiel";
            _typeNameTable[31] = "BOBApp.Views.Punten";
            _typeNameTable[32] = "BOBApp.Views.Register";
            _typeNameTable[33] = "BOBApp.Views.RitItem";
            _typeNameTable[34] = "BOBApp.Views.VindRit";
            _typeNameTable[35] = "BOBApp.Views.VindRitBob";
            _typeNameTable[36] = "BOBApp.Views.VindRitChat";
            _typeNameTable[37] = "BOBApp.Views.VindRitFilter";
            _typeNameTable[38] = "BOBApp.Views.ZoekVrienden";

            _typeTable = new global::System.Type[39];
            _typeTable[0] = typeof(global::BOBApp.BaseViewModelLocator);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::BOBApp.ViewModels.MainViewVM);
            _typeTable[3] = typeof(global::GalaSoft.MvvmLight.ViewModelBase);
            _typeTable[4] = typeof(global::GalaSoft.MvvmLight.ObservableObject);
            _typeTable[5] = typeof(global::BOBApp.ViewModels.BestemmingenVM);
            _typeTable[6] = typeof(global::BOBApp.ViewModels.FeestjesOverzichtVM);
            _typeTable[7] = typeof(global::BOBApp.ViewModels.LoginVM);
            _typeTable[8] = typeof(global::BOBApp.ViewModels.ProfielVM);
            _typeTable[9] = typeof(global::BOBApp.ViewModels.PuntenVM);
            _typeTable[10] = typeof(global::BOBApp.ViewModels.RegisterVM);
            _typeTable[11] = typeof(global::BOBApp.ViewModels.VindRitVM);
            _typeTable[12] = typeof(global::BOBApp.ViewModels.VindRitFilterVM);
            _typeTable[13] = typeof(global::BOBApp.ViewModels.VindRitChatVM);
            _typeTable[14] = typeof(global::BOBApp.ViewModels.ZoekVriendenVM);
            _typeTable[15] = typeof(global::BOBApp.ViewModels.MijnRittenVM);
            _typeTable[16] = typeof(global::BOBApp.MainPage);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[19] = typeof(global::Windows.UI.Color);
            _typeTable[20] = typeof(global::System.ValueType);
            _typeTable[21] = typeof(global::System.Byte);
            _typeTable[22] = typeof(global::BOBApp.Views.Bestemmingen);
            _typeTable[23] = typeof(global::BOBApp.Views.Bestemmingen_Nieuw);
            _typeTable[24] = typeof(global::System.Collections.Generic.IList<global::Windows.UI.Xaml.DependencyObject>);
            _typeTable[25] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[26] = typeof(global::BOBApp.Views.FeestjesOverzicht);
            _typeTable[27] = typeof(global::BOBApp.Views.Login);
            _typeTable[28] = typeof(global::BOBApp.Views.MainView);
            _typeTable[29] = typeof(global::BOBApp.Views.MijnRitten);
            _typeTable[30] = typeof(global::BOBApp.Views.Profiel);
            _typeTable[31] = typeof(global::BOBApp.Views.Punten);
            _typeTable[32] = typeof(global::BOBApp.Views.Register);
            _typeTable[33] = typeof(global::BOBApp.Views.RitItem);
            _typeTable[34] = typeof(global::BOBApp.Views.VindRit);
            _typeTable[35] = typeof(global::BOBApp.Views.VindRitBob);
            _typeTable[36] = typeof(global::BOBApp.Views.VindRitChat);
            _typeTable[37] = typeof(global::BOBApp.Views.VindRitFilter);
            _typeTable[38] = typeof(global::BOBApp.Views.ZoekVrienden);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_BaseViewModelLocator() { return new global::BOBApp.BaseViewModelLocator(); }
        private object Activate_2_MainViewVM() { return new global::BOBApp.ViewModels.MainViewVM(); }
        private object Activate_4_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }
        private object Activate_5_BestemmingenVM() { return new global::BOBApp.ViewModels.BestemmingenVM(); }
        private object Activate_6_FeestjesOverzichtVM() { return new global::BOBApp.ViewModels.FeestjesOverzichtVM(); }
        private object Activate_7_LoginVM() { return new global::BOBApp.ViewModels.LoginVM(); }
        private object Activate_8_ProfielVM() { return new global::BOBApp.ViewModels.ProfielVM(); }
        private object Activate_9_PuntenVM() { return new global::BOBApp.ViewModels.PuntenVM(); }
        private object Activate_10_RegisterVM() { return new global::BOBApp.ViewModels.RegisterVM(); }
        private object Activate_11_VindRitVM() { return new global::BOBApp.ViewModels.VindRitVM(); }
        private object Activate_12_VindRitFilterVM() { return new global::BOBApp.ViewModels.VindRitFilterVM(); }
        private object Activate_13_VindRitChatVM() { return new global::BOBApp.ViewModels.VindRitChatVM(); }
        private object Activate_14_ZoekVriendenVM() { return new global::BOBApp.ViewModels.ZoekVriendenVM(); }
        private object Activate_15_MijnRittenVM() { return new global::BOBApp.ViewModels.MijnRittenVM(); }
        private object Activate_16_MainPage() { return new global::BOBApp.MainPage(); }
        private object Activate_22_Bestemmingen() { return new global::BOBApp.Views.Bestemmingen(); }
        private object Activate_23_Bestemmingen_Nieuw() { return new global::BOBApp.Views.Bestemmingen_Nieuw(); }
        private object Activate_26_FeestjesOverzicht() { return new global::BOBApp.Views.FeestjesOverzicht(); }
        private object Activate_27_Login() { return new global::BOBApp.Views.Login(); }
        private object Activate_28_MainView() { return new global::BOBApp.Views.MainView(); }
        private object Activate_29_MijnRitten() { return new global::BOBApp.Views.MijnRitten(); }
        private object Activate_30_Profiel() { return new global::BOBApp.Views.Profiel(); }
        private object Activate_31_Punten() { return new global::BOBApp.Views.Punten(); }
        private object Activate_32_Register() { return new global::BOBApp.Views.Register(); }
        private object Activate_33_RitItem() { return new global::BOBApp.Views.RitItem(); }
        private object Activate_34_VindRit() { return new global::BOBApp.Views.VindRit(); }
        private object Activate_35_VindRitBob() { return new global::BOBApp.Views.VindRitBob(); }
        private object Activate_36_VindRitChat() { return new global::BOBApp.Views.VindRitChat(); }
        private object Activate_37_VindRitFilter() { return new global::BOBApp.Views.VindRitFilter(); }
        private object Activate_38_ZoekVrienden() { return new global::BOBApp.Views.ZoekVrienden(); }
        private void VectorAdd_24_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Windows.UI.Xaml.DependencyObject>)instance;
            var newItem = (global::Windows.UI.Xaml.DependencyObject)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::BOBApp.BOBApp_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  BOBApp.BaseViewModelLocator
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_BaseViewModelLocator;
                userType.AddMemberName("MainViewVM");
                userType.AddMemberName("BestemmingenVM");
                userType.AddMemberName("FeestjesOverzichtVM");
                userType.AddMemberName("LoginVM");
                userType.AddMemberName("ProfielVM");
                userType.AddMemberName("PuntenVM");
                userType.AddMemberName("RegisterVM");
                userType.AddMemberName("VindRitVM");
                userType.AddMemberName("VindRitFilterVM");
                userType.AddMemberName("VindRitChatVM");
                userType.AddMemberName("ZoekVriendenVM");
                userType.AddMemberName("MijnRittenVM");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  BOBApp.ViewModels.MainViewVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  GalaSoft.MvvmLight.ViewModelBase
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case 4:   //  GalaSoft.MvvmLight.ObservableObject
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_ObservableObject;
                xamlType = userType;
                break;

            case 5:   //  BOBApp.ViewModels.BestemmingenVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 6:   //  BOBApp.ViewModels.FeestjesOverzichtVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  BOBApp.ViewModels.LoginVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  BOBApp.ViewModels.ProfielVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  BOBApp.ViewModels.PuntenVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  BOBApp.ViewModels.RegisterVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  BOBApp.ViewModels.VindRitVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  BOBApp.ViewModels.VindRitFilterVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  BOBApp.ViewModels.VindRitChatVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  BOBApp.ViewModels.ZoekVriendenVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  BOBApp.ViewModels.MijnRittenVM
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  BOBApp.MainPage
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Color
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 20:   //  System.ValueType
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 21:   //  Byte
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  BOBApp.Views.Bestemmingen
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_Bestemmingen;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  BOBApp.Views.Bestemmingen_Nieuw
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_Bestemmingen_Nieuw;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  System.Collections.Generic.IList`1<Windows.UI.Xaml.DependencyObject>
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_24_IList;
                xamlType = userType;
                break;

            case 25:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  BOBApp.Views.FeestjesOverzicht
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_FeestjesOverzicht;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  BOBApp.Views.Login
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_27_Login;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  BOBApp.Views.MainView
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_MainView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  BOBApp.Views.MijnRitten
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_MijnRitten;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  BOBApp.Views.Profiel
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_Profiel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  BOBApp.Views.Punten
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_31_Punten;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  BOBApp.Views.Register
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_Register;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  BOBApp.Views.RitItem
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_RitItem;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  BOBApp.Views.VindRit
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_34_VindRit;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  BOBApp.Views.VindRitBob
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_VindRitBob;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  BOBApp.Views.VindRitChat
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_36_VindRitChat;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  BOBApp.Views.VindRitFilter
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_VindRitFilter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  BOBApp.Views.ZoekVrienden
                userType = new global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_ZoekVrienden;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_BaseViewModelLocator_MainViewVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.MainViewVM;
        }
        private object get_1_BaseViewModelLocator_BestemmingenVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.BestemmingenVM;
        }
        private object get_2_BaseViewModelLocator_FeestjesOverzichtVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.FeestjesOverzichtVM;
        }
        private object get_3_BaseViewModelLocator_LoginVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.LoginVM;
        }
        private object get_4_BaseViewModelLocator_ProfielVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.ProfielVM;
        }
        private object get_5_BaseViewModelLocator_PuntenVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.PuntenVM;
        }
        private object get_6_BaseViewModelLocator_RegisterVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.RegisterVM;
        }
        private object get_7_BaseViewModelLocator_VindRitVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.VindRitVM;
        }
        private object get_8_BaseViewModelLocator_VindRitFilterVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.VindRitFilterVM;
        }
        private object get_9_BaseViewModelLocator_VindRitChatVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.VindRitChatVM;
        }
        private object get_10_BaseViewModelLocator_ZoekVriendenVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.ZoekVriendenVM;
        }
        private object get_11_BaseViewModelLocator_MijnRittenVM(object instance)
        {
            var that = (global::BOBApp.BaseViewModelLocator)instance;
            return that.MijnRittenVM;
        }
        private object get_12_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_12_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_13_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_13_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_14_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_14_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_15_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_15_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::BOBApp.BOBApp_XamlTypeInfo.XamlMember xamlMember = null;
            global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "BOBApp.BaseViewModelLocator.MainViewVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "MainViewVM", "BOBApp.ViewModels.MainViewVM");
                xamlMember.Getter = get_0_BaseViewModelLocator_MainViewVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.BestemmingenVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "BestemmingenVM", "BOBApp.ViewModels.BestemmingenVM");
                xamlMember.Getter = get_1_BaseViewModelLocator_BestemmingenVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.FeestjesOverzichtVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "FeestjesOverzichtVM", "BOBApp.ViewModels.FeestjesOverzichtVM");
                xamlMember.Getter = get_2_BaseViewModelLocator_FeestjesOverzichtVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.LoginVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "LoginVM", "BOBApp.ViewModels.LoginVM");
                xamlMember.Getter = get_3_BaseViewModelLocator_LoginVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.ProfielVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "ProfielVM", "BOBApp.ViewModels.ProfielVM");
                xamlMember.Getter = get_4_BaseViewModelLocator_ProfielVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.PuntenVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "PuntenVM", "BOBApp.ViewModels.PuntenVM");
                xamlMember.Getter = get_5_BaseViewModelLocator_PuntenVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.RegisterVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "RegisterVM", "BOBApp.ViewModels.RegisterVM");
                xamlMember.Getter = get_6_BaseViewModelLocator_RegisterVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.VindRitVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "VindRitVM", "BOBApp.ViewModels.VindRitVM");
                xamlMember.Getter = get_7_BaseViewModelLocator_VindRitVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.VindRitFilterVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "VindRitFilterVM", "BOBApp.ViewModels.VindRitFilterVM");
                xamlMember.Getter = get_8_BaseViewModelLocator_VindRitFilterVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.VindRitChatVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "VindRitChatVM", "BOBApp.ViewModels.VindRitChatVM");
                xamlMember.Getter = get_9_BaseViewModelLocator_VindRitChatVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.ZoekVriendenVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "ZoekVriendenVM", "BOBApp.ViewModels.ZoekVriendenVM");
                xamlMember.Getter = get_10_BaseViewModelLocator_ZoekVriendenVM;
                xamlMember.SetIsReadOnly();
                break;
            case "BOBApp.BaseViewModelLocator.MijnRittenVM":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("BOBApp.BaseViewModelLocator");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "MijnRittenVM", "BOBApp.ViewModels.MijnRittenVM");
                xamlMember.Getter = get_11_BaseViewModelLocator_MijnRittenVM;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Color.A":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_12_Color_A;
                xamlMember.Setter = set_12_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_13_Color_B;
                xamlMember.Setter = set_13_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_14_Color_G;
                xamlMember.Setter = set_14_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::BOBApp.BOBApp_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::BOBApp.BOBApp_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_15_Color_R;
                xamlMember.Setter = set_15_Color_R;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::BOBApp.BOBApp_XamlTypeInfo.XamlSystemBaseType
    {
        global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::BOBApp.BOBApp_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

